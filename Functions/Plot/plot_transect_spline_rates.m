%
% out = plot_transect_spline_rates(regress_out,ages_ka,transect_type,plot_ages,save_plot)
% out = plot_transect_spline_rates(regress_out,ages_ka,transect_type,plot_ages,save_plot,mask)
% out = plot_transect_spline_rates(regress_out,ages_ka,transect_type,plot_ages,save_plot,mask,time_lim,pos_lim,rate_lim)
%
% Plots the modelled spline regression as the median with 95% confidence 
% bounds generated by transect_regress_spline.m. This is done separately 
% for each nuclide. The corresponding exposure ages are also plotted if 
% plot_ages is set as 1.
%
% regress_out is a required struct of model rate information generated by 
% transect_regress_spline.m.
%
% ages_ka is a required struct, containing ages and uncertainties 
% calculated using age_calc.m, elevations and positions, and a logical of 
% the nuclides that were measured.
%
% transect_type should be either "vert" or "horiz", which determines
% whether the transect is vertical (e.g. elevation above the modern ice) or
% horizontal (e.g. distance from modern ice terminus). The units are m/yr
% and km/yr respectively.
%
% plot_ages is a required binary input specifying whether to plot the 
% exposure ages together with the modelled regression [1] or not [0].
%
% save_plot is a binary input to save the figure(s) in .png and .eps 
% formats [1], or not [0].
%
% mask option can also be included to specify which samples to plot. This
% should be based on the original input sample data. Default is to plot all
% samples.
%
% Optionally set the limit for the age axis with time_lim ([lower upper]), 
% limit for the relative position axis with pos_lim ([lower upper]), and 
% limit for the rate of change axis with rate_lim ([lower upper]).
%
% Outputs the figure (fig) and axes (ax) handles.
%
% Written by Richard Selwyn Jones, Durham University
% richard.s.jones@durham.ac.uk
% Part of the iceTEA tools suite.
%
%
%%

function out = plot_transect_spline_rates(regress_out,ages_ka,transect_type,plot_ages,save_plot,mask,time_lim,pos_lim,rate_lim)

  % Check inputs
  if (nargin < 4 || nargin > 9)
      error('plot_transect_spline_rates has wrong number of inputs!');
  end
  if (~strcmp(transect_type,'vert') && ~strcmp(transect_type,'horiz'))
      error('transect_type should be "vert" or "horiz"!');
  end
  if (plot_ages ~= 0 && plot_ages ~= 1)
      error('plot_ages should be binary (1 or 0)!');
  end
  if (nargin < 5 || isempty(save_plot))
      save_plot = 0;
  end  
  if (nargin < 6 || isempty(mask))
      mask = 1:length(ages_ka.sample_names);
  end
  
  % Define colours
  d_colours = [0.86,0.098,0.106; 0.208,0.475,0.694; 0.291,0.66,0.279; 0.574,0.294,0.615; 0.962,0.479,0];
  l_colours = [0.98,0.703,0.68; 0.699,0.801,0.887; 0.797,0.918,0.77; 0.867,0.793,0.891; 0.992,0.848,0.648];

  
  % Get relative position of samples (use elevation if input is NaN)
  pos = zeros(length(ages_ka.position),1);
  for a = 1:length(ages_ka.position)
      if isnan(ages_ka.position(a))
          pos(a) = ages_ka.elevation(a);
      else
          pos(a) = ages_ka.position(a);
      end
  end
  if strcmp(transect_type,'vert')
      pos_err = ages_ka.elevation_err;
  else
      pos_err = zeros(1,length(pos)); % Have to assume that uncertainty on the position is zero
  end
  
  
  % Get indices of nuclides measured
  NN_ind = find(ages_ka.NN);
  
  
  % Plot for each nuclide
  for b = 1:numel(NN_ind)
      
      N_ind = NN_ind(b);
      
      if N_ind == 1
          N_name = 'Be-10';
          col = [d_colours(1,:); l_colours(1,:)];
          ages_errs = ages_ka.Be10(mask,:);
          N_pos = pos(ages_ka.logical_10);
          N_pos = N_pos(mask);
          N_pos_err = pos_err(ages_ka.logical_10);
          N_pos_err = N_pos_err(mask);
          N_rates = regress_out.N10;
          N_rates_plot = N_rates.plot_data;
      elseif N_ind == 2
          N_name = 'Al-26';
          col = [d_colours(2,:); l_colours(2,:)];
          ages_errs = ages_ka.Al26(mask,:);
          N_pos = pos(ages_ka.logical_26);
          N_pos = N_pos(mask);
          N_pos_err = pos_err(ages_ka.logical_26);
          N_pos_err = N_pos_err(mask);
          N_rates = regress_out.N26;
          N_rates_plot = N_rates.plot_data;
      end
      
      % Sort rates
      reg_rates68 = N_rates_plot.reg_rate68;
      reg_rates95 = N_rates_plot.reg_rate95;
      reg_time = N_rates_plot.reg_time;
      med_rates = N_rates.med_rate;
      med_time = N_rates.yearsBP;
      if med_rates(1) == 0
          reg_rates68 = reg_rates68(2:end-1);
          reg_rates95 = reg_rates95(2:end-1);
          reg_time = reg_time(2:end-1);
          med_rates = med_rates(2:end);
          med_time = med_time(2:end);
      end
      
      % Calculate max and min rates
      [max_rate,max_rate_idx] = max(med_rates);
      max_rate_time = med_time(max_rate_idx);
      [min_rate,min_rate_idx] = min(med_rates);
      min_rate_time = med_time(min_rate_idx);
%       if min_rate <= 0 % If min rate is zero at 95%, use median values
%           [min_rate,min_rate_idx] = min(N_rates.med_rate);
%           min_rate_time = N_rates.yearsBP(min_rate_idx);
%       end
      
      
      fig = figure;
      
      if plot_ages == 1
          col_95 = [0.85,0.85,0.85];
          col_m = [0.15,0.15,0.15];
      else
          col_95 = col(2,:);
          col_m = col(1,:);
      end
      
      if strcmp(transect_type,'horiz')
          y_lab1 = ('Relative distance (km)');
          y_lab2 = ({'Rate of change',' (m yr^{-1})'});
          rate_factor = 1000;
      else
          y_lab1 = ('Relative elevation (m)');
          y_lab2 = ({'Rate of change','(cm yr^{-1})'});
          rate_factor = 100;
      end
      
      if (strcmp(transect_type,'vert'))
          summary_text = {strcat('{Max. rate: }',num2str(round(max_rate*rate_factor,2)),'{ cm yr^{-1} at }',num2str(round(max_rate_time/1000,2)),'{ ka}'),strcat('{Min. rate: }',num2str(round(min_rate*rate_factor,2)),'{ cm yr^{-1} at }',num2str(round(min_rate_time/1000,2)),'{ ka}')};
      else
          summary_text = {strcat('{Max. rate: }',num2str(round(max_rate*rate_factor,2)),'{ m yr^{-1} at }',num2str(round(max_rate_time/1000,2)),'{ ka}'),strcat('{Min. rate: }',num2str(round(min_rate*rate_factor,2)),'{ m yr^{-1} at }',num2str(round(min_rate_time/1000,2)),'{ ka}')};
      end
      
      
      subplot(3,1,1:2)
      
      hold on;
      fill(N_rates_plot.reg_time/1000,N_rates_plot.reg_pos95,col_95,'EdgeColor','none','FaceAlpha',.5);
      fill(N_rates_plot.reg_time/1000,N_rates_plot.reg_pos68,col_95,'EdgeColor','none');
      med = plot(N_rates.yearsBP/1000,N_rates.med_y,'-','color',col_m,'LineWidth',1.5);
      
      if plot_ages == 1
          for a = 1:length(ages_errs(:,1))
              this_age_low = ages_errs(a,1) - ages_errs(a,2);
              this_age_upp = ages_errs(a,1) + ages_errs(a,2);
              this_pos_low = N_pos(a) - N_pos_err(a);
              this_pos_upp = N_pos(a) + N_pos_err(a);
              xx = [this_age_low this_age_low this_age_upp this_age_upp this_age_low];
              yy = [this_pos_upp this_pos_low this_pos_low this_pos_upp this_pos_upp];
              plot(xx,yy,'Color',col(2,:),'LineWidth',1.5);
          end
          plot(ages_errs(:,1),N_pos,'o','MarkerSize',4,'MarkerEdgeColor',col(1,:),'MarkerFaceColor',col(2,:),'LineWidth',1);
      end
      
      hold off;
      box on;
      ax1 = gca;
      set(ax1,'xticklabel',[]);
      ylabel(y_lab1);
      
      if (nargin > 6 && ~isempty(time_lim))
          xlim(time_lim);
      else
          xlim(ax1.XLim);
      end
      if (nargin > 6 && ~isempty(pos_lim))
          ylim(pos_lim);
      else
          ylim(ax1.YLim);
      end
      ax1.XDir = 'reverse';
      grid on;
      legend(med,'Median (with 68% and 95% confidence)','Location','SouthWest'); legend('boxoff');
      set(gca,'FontSize',10);
      
      
      subplot(3,1,3)
      
      hold on;
      fill(reg_time/1000,reg_rates95*rate_factor,col_95,'EdgeColor','none','FaceAlpha',.5);
      fill(reg_time/1000,reg_rates68*rate_factor,col_95,'EdgeColor','none');
      plot(med_time/1000,med_rates*rate_factor,'-','color',col_m,'LineWidth',1.5);
      hold off;
      box on;
      ax2 = gca;
      xlabel('Exposure age (ka)');
      ylabel(y_lab2);
      
      if (nargin > 6 && ~isempty(time_lim))
          xlim(time_lim);
      else
          xlim(ax1.XLim);
      end
      if (nargin > 6 && ~isempty(rate_lim))
          ylim(rate_lim);
      else
          ylim(ax2.YLim);
      end
      ax2.XDir = 'reverse';
      ax2_height = 0.25; ax2.Position(4) = ax2_height;
      box_dim = [0.14 0.20 0.1 0.2];
      annotation('textbox',box_dim,'String',summary_text,'VerticalAlignment','middle','FitBoxToText','on','Color',col(1,:),'FontSize',10,'FontWeight','bold','EdgeColor','none');
      grid on;
      set(gca,'FontSize',10);
      

      % Save figure
      if save_plot == 1
          fig_name = strcat(ages_ka.ages_name,'_SplineRegress_Rates_',N_name);
          export_fig(fig_name,'-png','-r300','-transparent'); % Save as a PNG (raster) file
          saveas(gcf,fig_name,'epsc'); % Save as a EPS (vector) file
      end
      
      out{b} = [fig ax1 ax2];
      
      
  end
  
end
