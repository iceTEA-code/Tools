function [out] = fancy_pants_camelplot(ages,errors)% camelplot.m%% Syntax: [handles] = camelplot(ages,errors)%% Plots camel diagrams, i.e. normal kernel density estimates, for % a set of data with errors, for example a collection of radiometric dates. % % for a discussion of the basic camel diagram concept see:%% Lowell, T. V., 1995, The application of radiocarbon age estimates to% the dating of glacial sequences: An example from the Miami sublobe, Ohio,% U.S.A.: Quaternary Science Reviews, v. 14, p. 85-99.%% Input arguments are vectors containing the values and errors, respectively, % of data values that are assumed to represent gaussian distributions around % the measured values. The error in each measurement is taken to be the S.D. % of its gaussian distribution. % % The 'fancy pants' version of this code corrects the effect in which% measurements with the same precision appear less important as they gety% older. % % Returns a vector of handles to graphic objects: first the handles to the % gaussians corresponding to individual data points, then the handle to the % summary curve. %% Greg Balco -- Berkeley Geochronology Center -- February, 2016%% This program is free software; you can redistribute it and/or modify% it under the terms of the GNU General Public License, version 2,% as published by the Free Software Foundation (www.fsf.org).numsamples = length(ages);minAge = min(ages) - (4*errors(find(ages == min(ages))));maxAge = max(ages) + (4*errors(find(ages == max(ages))));ageRange = maxAge - minAge;x = minAge:(ageRange/1000):maxAge;totalPdf = zeros(size(x));for a = 1:numsamples;		mu = ages(a); sigma = errors(a);	xn = (x - mu) ./ sigma;	y = exp(-0.5 * xn .^2) ./ (sqrt(2*pi) .* sigma);	eval(['pdf' num2str(a) ' = y;'])end;% Fancy-pants normalizationexpected = 1 ./ (sqrt(2*pi) .* (ages.*0.03)); % expected height if 3% uncertfor a = 1:numsamples;    eval(['pdf' int2str(a) ' = pdf' int2str(a) './(expected(a));']);    eval(['totalPdf = totalPdf + pdf' int2str(a) ';']);end;hold on;grid on;b = [];% plot individual curves, normalised to 1/nfor a = 1:numsamples;	eval(['h' int2str(a) ' = plot(x,pdf' num2str(a) './numsamples,''r'');']);	eval(['b = [b h' int2str(a) '];']);end;% total curve, normalised to 1hx = plot(x,totalPdf./numsamples,'k');out = [b hx];