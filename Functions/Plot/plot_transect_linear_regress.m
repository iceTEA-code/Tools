%
% out = plot_transect_regressions(regress_out,ages_ka,transect_type,plot_ages,save_plot)
% out = plot_transect_regressions(regress_out,ages_ka,transect_type,plot_ages,save_plot,mask)
% out = plot_transect_regressions(regress_out,ages_ka,transect_type,plot_ages,save_plot,mask,time_lim,pos_lim)
%
% Plots the modelled linear regressions for all non-negative rates with the
% mean and 95% confidence bounds generated by transect_regress_linear.m, as
% either a horizontal or vertical transect. This is done separately for 
% each nuclide. The corresponding exposure ages are also plotted if 
% plot_ages is set as 1.
%
% regress_out is a required struct of model rate information generated by 
% transect_regress_linear.m.
%
% ages_ka is a required struct, containing ages and uncertainties 
% calculated using age_calc.m, elevations and positions, and a logical of 
% the nuclides that were measured.
%
% transect_type should be either "vert" or "horiz", which determines
% whether the transect is vertical (e.g. elevation above the modern ice) or
% horizontal (e.g. distance from modern ice terminus). The units are m/yr
% and km/yr respectively.
%
% plot_ages is a required binary input specifying whether to plot the 
% exposure ages together with the modelled regression [1] or not [0].
%
% save_plot is a binary input to save the figure(s) in .png and .eps 
% formats [1], or not [0].
%
% mask option can also be included to specify which samples to plot. This
% should be based on the original input sample data. Default is to plot all
% samples.
%
% Optionally set the limit for the age axis with time_lim ([lower upper]), 
% and limit for the relative position axis with pos_lim ([lower upper]).
%
% Outputs the figure (fig) and axes (ax) handles.
%
% Written by Richard Selwyn Jones, Durham University
% richard.s.jones@durham.ac.uk
% Part of the iceTEA tools suite.
%
%
%%

function out = plot_transect_linear_regress(regress_out,ages_ka,transect_type,plot_ages,save_plot,mask,time_lim,pos_lim)

  % Check inputs
  if (nargin < 4 || nargin > 8)
      error('plot_transect_linear_regress has wrong number of inputs!');
  end
  if (~strcmp(transect_type,'vert') && ~strcmp(transect_type,'horiz'))
      error('transect_type should be "vert" or "horiz"!');
  end
  if (plot_ages ~= 0 && plot_ages ~= 1)
      error('plot_ages should be binary (1 or 0)!');
  end
  if (nargin < 5 || isempty(save_plot))
      save_plot = 0;
  end  
  if (nargin < 6 || isempty(mask))
      mask = 1:length(ages_ka.sample_names);
  end
  
  % Define colours
  d_colours = [0.86,0.098,0.106; 0.208,0.475,0.694; 0.291,0.66,0.279; 0.574,0.294,0.615; 0.962,0.479,0];
  l_colours = [0.98,0.703,0.68; 0.699,0.801,0.887; 0.797,0.918,0.77; 0.867,0.793,0.891; 0.992,0.848,0.648];

  
  % Get relative position of samples (use elevation if input is NaN)
  pos = zeros(length(ages_ka.position),1);
  for a = 1:length(ages_ka.position)
      if isnan(ages_ka.position(a))
          pos(a) = ages_ka.elevation(a);
      else
          pos(a) = ages_ka.position(a);
      end
  end
  
  
  % Get indices of nuclides measured
  NN_ind = find(ages_ka.NN);
  
  
  % Plot for each nuclide
  for b = 1:numel(NN_ind)
      
      N_ind = NN_ind(b);
      
      if N_ind == 1
          N_name = 'Be-10';
          col = [d_colours(1,:); l_colours(1,:)];
          ages_errs = ages_ka.Be10(mask,:);
          N_pos = pos(ages_ka.logical_10);
          N_pos = N_pos(mask);
          N_rates = regress_out.N10;
          N_rates_plot = N_rates.plot_data;
      elseif N_ind == 2
          N_name = 'Al-26';
          col = [d_colours(2,:); l_colours(2,:)];
          ages_errs = ages_ka.Al26(mask,:);
          N_pos = pos(ages_ka.logical_26);
          N_pos = N_pos(mask);
          N_rates = regress_out.N26;
          N_rates_plot = N_rates.plot_data;
      end
      
      
      fig = figure;
      
      if plot_ages == 1
          rm_col = [0.85,0.85,0.85];
          m_col = [0.15,0.15,0.15];
      else
          rm_col = col(2,:);
          m_col = col(1,:);
      end
      
      if strcmp(N_rates.regress_type,'unweighted')
          reg_name = 'ULS';
      elseif strcmp(N_rates.regress_type,'weighted')
          reg_name = 'WLS';
      end
      
      hold on;
      
      if (strcmp(transect_type,'vert'))
          
          for c = 1:N_rates.n_iter-N_rates.n_bad
              rm_h = plot(N_rates_plot.rand_mod(:,c)/1000,N_rates_plot.xm,'-','color',rm_col);
          end
          %mm_h = plot(N_rates_plot.modl/1000,N_rates_plot.d_xm,'-','Color',m_col,'LineWidth',2);
          qu_h = plot(N_rates_plot.qu/1000,N_rates_plot.xm,':','color',m_col,'LineWidth',1.5);
          plot(N_rates_plot.ql/1000,N_rates_plot.xm,':','color',m_col,'LineWidth',1.5);
                    
          if plot_ages == 1
              err_h = errbar(ages_errs(:,1),N_pos,ages_errs(:,2),'-','horiz');
              set(err_h,'Color',col(1,:),'LineWidth',1.5);
              plot(ages_errs(:,1),N_pos,'o','MarkerSize',6,'MarkerEdgeColor',col(1,:),'MarkerFaceColor',col(2,:),'LineWidth',1);
          end
          
          %legend([mm_h,qu_h,rm_h],'Model mean','95% confidence','Random models','Location','NorthWest'); legend('boxoff');
          legend([qu_h,rm_h],'95% confidence','Random models','Location','NorthEast'); legend('boxoff');

          x_lab = 'Exposure age (ka)';
          y_lab = 'Relative elevation (m)';
          ax = gca;
          if (nargin > 6 && ~isempty(time_lim))
              xlim(time_lim);
          else
              xlim(ax.XLim);
          end
          if (nargin > 6 && ~isempty(pos_lim))
              ylim(pos_lim);
          else
              ylim(ax.YLim);
          end
          ax.XDir = 'reverse';
          box_dim = [0.16 0.14 0.1 0.2];
          summary_text = {strcat('{Nuclide: }',N_name),strcat('{Regression: }',reg_name),strcat('{68%: }',num2str(round(N_rates.quant_68(1),2)),'-',num2str(round(N_rates.quant_68(2),2)),'{ m yr^{-1}}'),strcat('{95%: }',num2str(round(N_rates.quant_95(1),2)),'-',num2str(round(N_rates.quant_95(2),2)),'{ m yr^{-1}}')};
          
          
      elseif (strcmp(transect_type,'horiz'))
          
          for c = 1:N_rates.n_iter-N_rates.n_bad
              rm_h = plot(N_rates_plot.xm,N_rates_plot.rand_mod(:,c)/1000,'-','color',rm_col);
          end
          %mm_h = plot(N_rates_plot.d_xm,N_rates_plot.modl/1000,'-','color',m_col,'LineWidth',2);
          qu_h = plot(N_rates_plot.xm,N_rates_plot.qu/1000,':','color',m_col,'LineWidth',1.5);
          plot(N_rates_plot.xm,N_rates_plot.ql/1000,':','color',m_col,'LineWidth',1.5);
          
          if plot_ages == 1
              err_h = errbar(N_pos,ages_errs(:,1),ages_errs(:,2),'-');
              set(err_h,'Color',col(1,:),'LineWidth',2);
              plot(N_pos,ages_errs(:,1),'o','MarkerSize',6,'MarkerEdgeColor',col(1,:),'MarkerFaceColor',col(2,:),'LineWidth',1);
          end
          
          %legend([mm_h,qu_h,rm_h],'Model mean','95% confidence','Random models','Location','SouthWest'); legend('boxoff');
          legend([qu_h,rm_h],'95% confidence','Random models','Location','SouthWest'); legend('boxoff');
          
          x_lab = 'Relative distance (km)';
          y_lab = 'Exposure age (ka)';
          ax = gca;
          if (nargin > 6 && ~isempty(time_lim))
              ylim(time_lim);
          else
              ylim(ax.YLim);
          end
          if (nargin > 6 && ~isempty(pos_lim))
              xlim(pos_lim);
          else
              xlim(ax.XLim);
          end
          ax.XDir = 'reverse';
          box_dim = [0.6 0.70 0.1 0.2];
          summary_text = {strcat('{Nuclide: }',N_name),strcat('{Regression: }',reg_name),strcat('{68%: }',num2str(round(N_rates.quant_68(1),2)),'-',num2str(round(N_rates.quant_68(2),2)),'{ km yr^{-1}}'),strcat('{95%: }',num2str(round(N_rates.quant_95(1),2)),'-',num2str(round(N_rates.quant_95(2),2)),'{ km yr^{-1}}')};
      end
      
      
      hold off;
      xlabel(x_lab);
      ylabel(y_lab);
      
      annotation('textbox',box_dim,'BackgroundColor','w','String',summary_text,'VerticalAlignment','middle','FitBoxToText','on','Color',col(1,:),'FontSize',10,'FontWeight','bold');
      box on;
      grid on;
      set(gca,'FontSize',10);
      
      
      % Save figure
      %set(gcf,'renderer','Painters'); % Uncomment to export the individual regression lines - WARNING: this will produce a very large file
      if save_plot == 1
          fig_name = strcat(ages_ka.ages_name,'_TransRegress_',N_name);
          export_fig(fig_name,'-png','-r300','-transparent'); % Save as a PNG (raster) file
          saveas(gcf,fig_name,'epsc'); % Save as a EPS (vector) file
      end
      
      out{b} = [fig ax];
      
      
  end
  
end
