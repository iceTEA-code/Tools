function out = muonfluxsato(z,h,Rc,s,consts,dflag)


% Calculates the production rate of Al-26, Be-10, 14C, or other nuclides by muons
% as a function of depth below the surface z (g/cm2) and
% site atmospheric pressure h (hPa), and cutoff rigidity Rc (GV).
% 
% syntax out = P_mu_totalSato(z,h,Rc,s,consts,dflag);
%
% consts is a structure containing nuclide-specific constants, as follows:
% consts.Natoms -  atom number density of the target atom (atoms/g)
% consts.k_neg - summary cross-section for negative muon capture (atoms/muon)
% consts.sigma190 - 190 GeV x-section for fast muon production (cm2)
% consts.SPhiInf - solar modulation (get from Nat's code)
%
% dflag = 'no' causes it to return only the nuclide production rate
% from muon reactions. Note that this is the total production rate from
% muons, that is, the sum of production by negative muon capture and 
% production by fast muon reactions. 
%
% dflag = 'yes' causes it to return a structure containing the complete
% breakdown of fluxes, stopping rates, production rates, etc. --
% 
% out.phi_vert_slhl muons/cm2/s/sr
% out.R_vert_slhl muons/g/s/sr
% out.R_vert_site muons/g/s/sr
% out.phi_vert_site muons/cm2/s/sr
% out.phi muons/cm2/yr
% out.R muons/g/yr
% out.P_fast atoms/g/yr
% out.P_neg atoms/g/yr
% out.Beta nondimensional
% out.Ebar GeV
% out.H g/cm2
% out.LZ g/cm2
%
% See the hard-copy documentation for more details. 
%
% This uses the scheme in Heisinger and others (2002, 2 papers), scaled using
% the omnidirectional muon fluxes generated by PARMA, as presented in 
% Sato et al. (2008). It then converts those scaled fluxes at the surface to
% vertical fluxes following Heisinger et al. (2002). The rest of the calculation 
% generally parallels the procedure presented in the hard-copy documentation 
% for the function "P_mu_total.m."
%
% Note that some constants are internal to the function. The only ones that
% get passed from upstream are the ones that a) are nuclide-specific, or b) 
% actually have quoted uncertainties in Heisinger's papers. 
% The fraction of muons that are negative is internal; so is the
% energy-dependence exponent alpha.
% 
% Modified by Nat Lifton -- Purdue University Depts of Earth and Atmospheric Sciences and Physics, 
% nlifton@purdue.edu
% March 2011
% from code written by Greg Balco -- UW Cosmogenic Nuclide Lab
% balcs@u.washington.edu
% March, 2006
% Part of the CRONUS-Earth online calculators: 
%      http://hess.ess.washington.edu/math
%
% Copyright 2001-2011, University of Washington and Purdue University
% All rights reserved
% Developed in part with funding from the National Science Foundation.
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License, version 2,
% as published by the Free Software Foundation (www.fsf.org).

% what version is this?

ver = '3.0';

if nargin < 6; dflag='no'; end;

% remember what direction the z vector came in

in_size = size(z);

% standardize direction

if size(z,1) > 1; z = z';end;

% figure the atmospheric depth in g/cm2

H = (1013.25 - h).*1.019716;
Href = 1013.25;

% find the omnidirectional flux at the site
mflux = MuonsX(h,Rc,s);%Generates muon flux at site from Sato et al. (2008) model
mfluxRef = MuonsX(1013.25,0,consts.SPhiInf); %Generates SLHL muon flux from Sato et al. (2008) model
% Inputs are for SLHL - Std Atm SL pressure, 0 Rc, Idealized solar min Phi (400 MV -
% similar to long-term mean over 11.4 ka, but not data dependent). Changed
% Phi from SPhiInf to 400 MV - 12/8/11. Changed back 12/15/11. See
% LiftonSatoSX.m comments


phi_site = (mflux.neg + mflux.pos);
phiRef = (mfluxRef.neg + mfluxRef.pos);

% find the vertical flux at SLHL

a = 258.5*(100.^2.66);
b = 75*(100.^1.66);

phi_vert_slhl = (a./((z+21000).*(((z+1000).^1.66) + b))).*exp(-5.5e-6 .* z);

% The above expression is only good to 2e5 g/cm2. We don't ever consider production
% below that depth. The full-depth scheme appears in the comments below.
% ------ begin full-depth flux equations -------
%phiz_1 = (a./((z+21000).*(((z+1000).^1.66) + b))).*exp(-5.5e-6 .* z);
%phiz_2 = 1.82e-6.*((121100./z).^2).*exp(-z./121100) + 2.84e-13;
%out(find(z<200000)) = phiz_1(find(z<200000));
%out(find(z>=200000)) = phiz_2(find(z>=200000));
% ------ end full-depth flux equations -------


% Convert E to Range
Temp = E2R(mflux.E); 
RTemp = Temp.R;
% 
% Set upper limit to stopping range to test comparability with measurements
StopLimit = 10;
% find the stopping rate of vertical muons at site
% find all ranges <10 g/cm2
stopindex = find(RTemp<StopLimit,1,'last');

SFmu = phi_site./phiRef;

SFmuslow = sum(phi_site(1:stopindex))./sum(phiRef(1:stopindex));
% SFmuslow = sum(phi_site(1))./sum(phiRef(1));

%   Prevent depths less than the minimum range in E2R to be used below
z(z < min(RTemp)) = min(RTemp);

% Find scaling factors appropriate for energies associated with stopping
% muons at depths z
Rz = interpolate(RTemp,SFmu,z);

Rz(Rz>SFmuslow) = SFmuslow;

RzSpline = spline(RTemp, SFmu);

% find the stopping rate of vertical muons at the site, scaled from SLHL
% this is done in a subfunction Rv0, because it gets integrated later.
R_vert_slhl = Rv0(z);
R_vert_site = R_vert_slhl.*Rz;

% find the flux of vertical muons at site

for a = 1:length(z);
    % integrate
    % ends at 200,001 g/cm2 to avoid being asked for an zero
    % range of integration -- 
    % get integration tolerance -- want relative tolerance around
    % 1 part in 10^4. 
    tol = phi_vert_slhl(a) * 1e-4;
    [temp,fcnt] = quad(@(x) Rv0(x).*ppval(RzSpline,x),z(a),(2e5+1),tol);
    % second variable assignment here to preserve fcnt if needed
    phi_vert_site(a) = temp;
end;
   
% invariant flux at 2e5 g/cm2 depth - constant of integration
% calculated using commented-out formula above
phi_200k = (a./((2e5+21000).*(((2e5+1000).^1.66) + b))).*exp(-5.5e-6 .* 2e5);
phi_vert_site = phi_vert_site + phi_200k;

% find the total flux of muons at site

% angular distribution exponent
nofz = 3.21 - 0.297.*log((z+H)./100 + 42) + 1.21e-5.*(z+H);
% derivative of same
dndz = (-0.297./100)./((z+H)./100 + 42) + 1.21e-5;

phi_temp = phi_vert_site.*2.*pi./(nofz+1);

% that was in muons/cm2/s
% convert to muons/cm2/yr

phi = phi_temp*60*60*24*365;

% find the total stopping rate of muons at site

R_temp = (2.*pi./(nofz+1)).*R_vert_site ... 
    - phi_vert_site.*(-2.*pi.*((nofz+1).^-2)).*dndz;
    
% that was in total muons/g/s
% convert to negative muons/g/yr

R = R_temp*0.44*60*60*24*365;

% Attenuation lengths
LambdaMu =(Href-h)./(log(phi_site)-log(phiRef));


% Now calculate the production rates. 

% Depth-dependent parts of the fast muon reaction cross-section

%Beta = 0.846 - 0.015 .* log((z./100)+1) + 0.003139 .* (log((z./100)+1).^2);
%Ebar = 7.6 + 321.7.*(1 - exp(-8.059e-6.*z)) + 50.7.*(1-exp(-5.05e-7.*z));

% internally defined constants

%aalpha = consts.aalpha;

% sigma0 = consts.sigma190./(190.^aalpha);

% fast muon production

%P_fast = phi.*Beta.*(Ebar.^aalpha).*consts.sigma0.*consts.Natoms;

% negative muon capture
%%%%%%%%%%%Put this in comppars1026!!!
% P_neg = R.*consts.k_neg_partial.*consts.fstar;

% return 

if strcmp(dflag,'no');
    %out = P_fast + P_neg;
elseif strcmp(dflag,'yes');
    out.phi_vert_slhl = phi_vert_slhl;
    out.R_vert_slhl = R_vert_slhl;
    out.phi_vert_site = phi_vert_site;
    out.R_vert_site = R_vert_site;
    out.phi= phi;
    out.R = R;
    out.SFmuslow=SFmuslow;
    out.SFmufast=SFmuslow;
    out.LambdaMu=LambdaMu;
%     out.Beta = Beta;
%     out.Ebar = Ebar;
%     out.P_fast = P_fast;
%     out.P_neg = P_neg;
    out.H = H;
    out.Rz = Rz;
    out.ver = ver;
end;
% -------------------------------------------------------------------------

function out = Rv0(z);

% this subfunction returns the stopping rate of vertically traveling muons
% as a function of depth z at sea level and high latitude.

a = exp(-5.5e-6.*z);
b = z + 21000;
c = (z + 1000).^1.66 + 1.567e5;
dadz = -5.5e-6 .* exp(-5.5e-6.*z);
dbdz = 1;
dcdz = 1.66.*(z + 1000).^0.66;

out = -5.401e7 .* (b.*c.*dadz - a.*(c.*dbdz + b.*dcdz))./(b.^2 .* c.^2);

% full depth calculation appears in comments below
%R_1 = -5.401e7 .* (b.*c.*dadz - a.*(c.*dbdz + b.*dcdz))./(b.^2 .* c.^2);
%f = (121100./z).^2;
%g = exp(-z./121100);
%dfdz = (-2.*(121100.^2))./(z.^3);
%dgdz = -exp(-z./121100)./121100;
%R_2 = -1.82e-6.*(g.*dfdz + f.*dgdz);
%out(find(z<200000)) = R_1(find(z<200000));
%out(find(z>=200000)) = R_2(find(z>=200000));

% -------------------------------------------------------------------------

function out = E2R(x)

% this subfunction returns the range and energy loss values for
% muons of energy E in MeV

% define range/energy/energy loss relation
% table for muons in standard rock
% http://pdg.lbl.gov/2010/AtomicNuclearProperties/ Table 281

data = [1.0e1 8.400e-1 6.619
    1.4e1 1.530e0 5.180
    2.0e1 2.854e0 4.057
    3.0e1 5.687e0 3.157
    4.0e1 9.133e0 2.702
    8.0e1 2.675e1 2.029
    1.0e2 3.695e1 1.904
    1.4e2 5.878e1 1.779
    2.0e2 9.331e1 1.710
    3.0e2 1.523e2 1.688
    4.0e2 2.114e2 1.698
    8.0e2 4.418e2 1.775
    1.0e3 5.534e2 1.808
    1.4e3 7.712e2 1.862
    2.0e3 1.088e3 1.922
    3.0e3 1.599e3 1.990
    4.0e3 2.095e3 2.038
    8.0e3 3.998e3 2.152
    1.0e4 4.920e3 2.188
    1.4e4 6.724e3 2.244
    2.0e4 9.360e3 2.306
    3.0e4 1.362e4 2.383
    4.0e4 1.776e4 2.447
    8.0e4 3.343e4 2.654
    1.0e5 4.084e4 2.747
    1.4e5 5.495e4 2.925
    2.0e5 7.459e4 3.187
    3.0e5 1.040e5 3.611
    4.0e5 1.302e5 4.037
    8.0e5 2.129e5 5.748];

% units are range in g cm-2 (column 2)
% energy in MeV (column 1)
% Total energy loss/g/cm2 in MeV cm2/g(column 3)

% deal with zero situation

too_low = find(x < 10);
x(too_low) = ones(size(too_low));

% obtain ranges
% use log-linear interpolation

% out = exp(spline(log(data(:,1)),log(data(:,2)),log(x')))';
out.R = exp(interpolate(log(data(:,1)),log(data(:,2)),log(x')))';
out.Eloss = exp(interpolate(log(data(:,1)),log(data(:,3)),log(x')))';

